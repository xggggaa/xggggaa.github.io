<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JJH</title>
  
  <subtitle>weitingtingshixiaozhu</subtitle>
  <link href="https://xggggaa.github.io/atom.xml" rel="self"/>
  
  <link href="https://xggggaa.github.io/"/>
  <updated>2021-12-03T08:28:41.752Z</updated>
  <id>https://xggggaa.github.io/</id>
  
  <author>
    <name>JJH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++编程笔记</title>
    <link href="https://xggggaa.github.io/2021/12/03/C-%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://xggggaa.github.io/2021/12/03/C-%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2021-12-03T07:08:08.000Z</published>
    <updated>2021-12-03T08:28:41.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-基础："><a href="#C-基础：" class="headerlink" title="C++基础："></a>C++基础：</h2><pre><code>/*生成随机数！！！调用rand()将生成一个介于0和RAND_MAX之间的随机整数(RAND_MAX是一个与实现有关的常量)，再次调用rand()会得到一个不同的数字。rand函数在&lt;cstdlib&gt;头文件中声明。使用srand()函数设置种子，通常会设置srand(time(0));但应声明time函数的头文件：&lt;ctime&gt;。就可以生成一个真正意义上的随机数。*//*ASCII码！！！cout&lt;&lt;(int)&#39;A&#39;&lt;&lt;endl;//65~90cout&lt;&lt;(int)&#39;a&#39;&lt;&lt;endl;//97~122cout&lt;&lt;(int)&#39;0&#39;&lt;&lt;endl;//48~57*//*sentinel！！！sentinel提供了一种将文件链接到程序输入方法，例如: sentinel &lt; numbers.txt 执行该程序，则程序的输入指令将不再期待从键盘输入。所有输入命令都从文件numbers.txt中获取输入，这一过程称为&#39;输入重定向&#39;。还可以重定向输出。例如：sentinel &lt; numbers.txt &gt; output.txt 文件output.txt将包含输入提示和输出。*//*最大最小值！！！max和min函数，运用时加上头文件##include&lt;algorithm&gt;*//*成员函数！！！许多C++函数要求使用点记号，这些函数称为成员函数。length函数是用点记号调用的，写下需要获取长度的字符串，然后写一个句点，再写函数名，随后再写一对括号， int n = name.length();substr成员函数在有了字符串的条件下可以提取子串。例如：string str1=&quot;hello,world!&quot;;string str2 = str.substr(0,5);则输出hello,，若为(7,5)则输出world;若输出(7)则会输出orld!；fail成员函数，可以测试输入失败的状态；str.find(ss)//返回字符串ss在str中的位置str.find(ss,num) //在str[num]~str[n-1]范围内查找并返回字符串ss在str的位置(num为位置，n为字符串的长度.)str.rfind(ss,num)在str[0]~str[num]范围内查找并返回字符串ss在str的位置（reverse）str.find_first_of(str,pos)//查找第一个出现的位置str.find_last_of(str,pos)//查找最后一个出现的位置*//*幂运算和求根运算及其他运算！！！要运用幂运算和求根运算及其他运算，必须输入头文件##include&lt;cmath&gt;用一个数的平方根要用sqrt函数，例如，√x写为sqrt(x),要计算x^n（x的n次幂），应写作pow(x,n)其他数学函数：sin(x),cos(x),tan(x),log(x)[这个运算的是x的自然对数],log10(x)[这个运算的是以10为底，x的对数],abs(x)[计算的是x的绝对值]。有时候所运用的函数的头文件不是cmath,例如是cstdlib，则需要找到该函数的头档,最好使用开发环境的联机帮助或因特网上的参考网站，例如http://cplusplus.com。*//*舍入误差！！！使用浮点数计算时，例如定义：double a = 4.35;cout&lt;&lt;a*100;则会输出434，这是由于机器是以二进制计数，而二进制数字丢失导致输出有误差，若要避免误差，则要cout&lt;&lt;a*100+0.5*//*科学计数法！！！在浮点型中float,double可用科学计数法，例如double a = 2.96E-2或2.96e-2;即表示2.96*10的负二次方*//*强制类型转换！！！若要把double类型的数据转换为int类型，例如 double price = 4.35; int cents = static_cast&lt;int&gt;(cast*100+0.5);static_cast:用于非多态类型转换(静态转换)，任何标准转换都可以用它，但是不能用于两个不相关的类型转换。reinterpret_cast:将一种类型转换为另一种不同的类型。*//*小数和有效数字！！！fixed和setprecision和setw称为格式控制符。使用格式控制符，必须加头文件##include&lt;iomanip&gt;。例如cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;a;即表示变量a输出的值要保留3位小数；cout&lt;&lt;setprecision(3)&lt;&lt;a;即表示变量a输出的值要保留三位有效数字；cout&lt;&lt;setw(8)&lt;&lt;a;即表示变量a输出的值会输出等于8个位置的值，若a有4位，则会在a前补上4个空格，若a有8位以上，则仍输出a。/*递增递减！！！前置递增：++a；先让变量+1，然后进行表达式运算。后置递增：a++；先进行表达式运算，再让变量+1。前置递减：--a后置递减：a--*//*字符型！！！char ch=&#39;a&#39;;字符型若输入(int)ch;则会查出a的ASCII码*//*字符串型！！！C风格字符串：char* 字符名[] =&quot; 字符串名 &quot;;C++风格字符串：string 变量名=“ 字符串名 ”;（C++风格字符串若要定义使用，要加头文件##include&lt;string&gt;）连接两个字符串应该用：string str1 = &quot;hello&quot;; string str2= str1 + &quot; C &quot;;而不能写：string str2 = &quot;hello&quot; + &quot;C&quot;;对于C字符串的补充：在&lt;cstring&gt;头文件下可以用：（s和t是字符数组，n是整数）strlen(s)：返回s的长度strcpy（t，s）：把s中的字符复制到t中strncpy（t，s，n）：至多复制s中的n个字符到tstrcat（t，s）：将s中的字符追加到t的结尾strncat（t，s，n）：将之多n个s中的字符追加到t的末尾strcmp（t，s）：如果s和t的内容相同，则返回0，如果按照字典顺序s在t之前，则返回一个负整数，否则返回一个正整数在&lt;cstdlib&gt;头文件下：char year[]= &quot;2020&quot;;int y = atoi(year);y= 2020;如果s是一个字符串，那么s.c_str()生成一个指向字符串中字符的char*指针在&lt;cctype&gt;头文件下：toupper将小写字母转换成大写，而tolower则相反。char a = &#39;a&#39;;char c = toupper(a);*//*布尔类型！！！bool a=true;  a = false;*//*三目运算符！！！表达式1?表达式2:表达式3;(判断表达式一是否成立，若成立执行表达式2，否则执行表达式3)*//*switch语句！！！switch(表达式)&#123;case 结果一: 执行语句;break;case 结果二:执行语句;break;.........default:执行语句;break;&#125;*//*跳转语句！！！break: 跳出本循环，执行循环之后的语句；continue: 跳过本次循环中余下尚未执行的语句，继续执行下一次循环；goto: goto a; a:  直接跳过了中间的语句。*//*数组！！！一维数组：1.数据类型 数组名[数组长度];2.数据类型 数组名[数组长度]=&#123;数据1,数据2...&#125;;3.数据类型 数组名[]=&#123;数据1,数据2...&#125;;二维数组:1.数据类型 数组名[行数][列数];2.数据类型 数组名[行数][列数]=&#123;&#123;数据1,数据2&#125;,&#123;数据3,数据4&#125;&#125;;3.数据类型 数组名[行数][列数]=&#123;数据1,数据2,数据3,数据4&#125;;4.数据类型 数组名[][列数]=&#123;数据1,数据2,数据3,数据4&#125;;*//*函数！！！函数的定义：1.返回值类型；2.函数名；3.参数表列；4.函数体语句；5.return 表达式；函数的常见形式；1.无参无返void test1()&#123;&#125;;输出只需要输入test1()即可输出该函数结果2.有参无返void test2(int a)&#123;&#125;;输出只需要输入test2(100)即可输出该函数结果3.无参有返int test3()&#123;return100&#125;;输出只需要输入test3()即可输出该函数结果，还会输出return的返回值1004.有参有返int test4(int a)&#123;return 100&#125;;输出只需呀输入test4(1000)即可输出该函数结果，还会输出return的返回值100函数的声明：函数可以声明多次，但只能定义一次；函数的份文件编写：1.创建后缀名为.h的头文件；2.创建后缀名为.cpp的源文件；3.在头文件中写函数的声明以及##include&lt;iostream&gt;using namespace std；4.在源文件中写函数的定义以及##include &quot;头文件.h&quot;双引号表示用户自定义的头文件；*//*指针！！！（指针就是地址）指针的作用：可以通过指针间接的访问内存。指针定义的语法：数据类型*指针变量名。使用指针：可以通过解引用的方式来找到指针所指向的内存，解引用即指针前加一个星号*。   int a = 20;  int *p = &amp;a;  那么若cout&lt;&lt;*p;输出的是a的值。指针所占用的内存空间：指针也是一种数据类型，指针在32位操作系统下占用4个字节，在64位操作系统下占用8个字节。空指针：空指针用于给指针变量进性初始化，空指针是不可以访问的。 int *p =NULL;(NULL即代表空，是系统所占用编号为0~255号内存，不允许用户访问)。野指针：即指针指向了非法的内存空间，直接将指针定义为一个内存空间。int *p = (int)0x1100.const修饰指针：const可以修饰常量，也可以修饰指针，也可以既修饰常量又修饰指针。                         常量指针的特点：可以改变指针的方向，但不可以改变指针指向的值。 const  *p = &amp;a;                         指针常量的特点：指针的指向不可以改，但指针指向的值可以改。       int const *p = &amp;a;                         既修饰指针又修饰常量的特点：指针的指向和指针所指向的值都不可以改。const int * const p = &amp;a;指针和数组：int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;; int *p=arr; cout&lt;&lt;p；即可输出数组的地址，cout&lt;&lt;*p；即可输出数组的第一个元素，p++，cout&lt;&lt;*p；即可输出数组中的第二个元素。指针和函数：值传递：就是把main里面定义的实参传到函数的形参里                    地址传递：函数里定义的变量为：*p，main里面要传过去的变量则应该为&amp;a指针和函数和数组：void bubblesort(int *arr,int len)或者void bubblesort(int arr[],int len);这里的*arr和arr[]是一样的。*//*结构体！！！结构体基本概念：结构体属于用户自己定义的数据类型，允许用户存储不同的数据类型结构体的定义和使用：struct 结构体名&#123;结构体成员列表&#125;；结构体创建变量的三种方式：1.struct 结构体名 变量名；2.struct 结构体名 变量名=&#123;成员1值，成员2值...&#125;；3.定义结构体是顺便创建变量结构体数组：struct 结构体名 数组名[元数个数] = &#123;&#123;&#125;，&#123;&#125;，&#123;&#125;...&#125;；(用逗号分割)结构体指针：先创建一个结构体变量，例如，struct student s =&#123;姓名，年龄，分数&#125;。创建指针，struct *p = &s; 利用指针访问结构体变量，cout<<p->年龄或姓名或分数.或者(*p).年龄或姓名或分数结构体嵌套结构体：例如struct student,struct teacher，若要在teacher中嵌套student，必须要在teacher前先定义一个student，若要访问teacher中的student里面的元素，应该写teacher.student.学生中的属性。结构体作函数参数：值传递：函数的声明为：void printstudent(struct student s)，函数的调用为printstudent(s);在调用前必定已经创建了名为s的结构体。                              地址传递：函数的声明为：void printstudent(struct student *s)，函数的调用为printstudent(&s);在调用前必定已经创建了名为s的结构体。结构体中const使用的场景：运用于函数与结构体与指针的应用中，为了节省内存，通常会在函数的形参中定义为结构体指针，为了不修改结构体中的数据，又在形参前加上了const。*/```## 程序的内存模型：```1、内存分区模型·代码区：存放函数体的二进制代码，由操作系统进行管理的        存放CPU执行的机器命令        代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中由一份代码即可        代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令·全局区：存放全局变量和静态变量及常量（静态变量：在局部变量前边加上static就变为静态变量）        全局变量和静态变量存放在此        全局区还包含了常量区，字符串常量和其他常量也存放在此        该区域的数据在程序结束后由操作系统释放        全局变量和局部变量的地址相差着一段距离，但全局变量和静态变量的地址却紧挨着        常量：字符串常量和const修饰的常量        字符串常量的地址和全局变量的地址距离较近        const修饰的全局变量的地址和字符串常量的地址紧挨着，和全局变量的地址距离较近        const修饰的局部变量（也叫局部常量）的地址和局部变量的地址紧挨着        对于全局区，全局变量，字符串常量，以及const修饰的全局变量（也就是全局常量），还有静态变量在全局区        对于局部变量，以及const修饰的局部变量（也就是局部常量）不在全局区中·栈区：由编译器自动分配和释放，存放函数的参数值，局部变量等        栈区数据的注意事项：不要返回局部变量所在的地址        栈区存放函数中的形参和局部变量        存放在栈区的局部变量会在函数执行完结束之后释放掉·堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收        在C++中主要运用new在堆区来开辟内存程序运行前分为：代码区和全局区程序运行后分为：栈区和堆区```## 函数高级：```1、函数默认参数      在C++中，函数肚饿形参列表中的形参是可以有默认值的      例：int func(int a, int b =10);      但如果我们仍对已经有默认值的形参传入数值，则会使用我们传入的数值。      如果我们先进行了函数的声明，在声明中有默认参数，那么在函数实现就不能有默认参数，即，在函数声明和函数实现里面只能有一次默认参数2、函数占位参数      C++函数的形参列表里可以有占位参数，（即，int a(int)形参只给数据类型，而不给出变量名字），占位参数用来占位，调用函数时必须填补该位置     占位参数也可以有默认参数（即，在 int 后边加上 = 10, 即，int = 10;）3、函数重载      作用：函数名可以相同，可以提高复用性      函数重载满足的条件：         ·同一个作用域下         ·函数名称相同         ·函数参数类型不同 或者个数不同 或者顺序不同      注意事项：         ·引用作为重载条件          对于函数参数用引用来表示，可以通过加上const来区分         ·函数重载碰到函数默认参数          若函数参数中有默认参数，则有可能发生二义性，即，函数不能正常调用          ```## 类和对象：```C++面向对象的三大特性：封装，继承，多态C++认为万事万物皆为对象，对象上有其行为和属性、具有相同性质的对象，我们可以抽象为类1、封装     1）封装的意义          ·将属性和行为作为一个整体，表现生活中的事物          ·将属性和行为加以权限控制          封装意义一：              在设计类的时候，属性和行为放在一起，表现事物              语法：class 类名&#123;访问权限: 属性 / 行为&#125;;              对于访问权限：公共权限，public              对于行为：通常使用函数来表示行为              对于属性：可以在main函数中，给创建的对象的属性进性赋值，通过类创建对象，也叫做实例化              类中的行为和属性，统称为成员，属性也可以称为：成员属性或者成员变量，行为也可以称为：成员函数或者成员方法          封装意义二：              类在设计时，通常会把属性和行为放在不同的权限下              访问权限有三种：1、public  公共权限；            成员 类内可以访问，类外也可以访问                                         2、protected  保护权限；      成员 类内可以访问，类外不可以访问 （儿子可以访问父亲的保护内容）                                         3、private  私有权限              成员 类内可以访问，类外不可以访问 （儿子不可以访问父亲私有内容）              struct和class的区别：                     在C++中struct和class唯一的区别就是默认的访问权限不同，struct的默认权限为公有（即，public），而class的默认权限为私有（即，private）              成员属性私有化：                     优点1：将所有成员属性设置为私有，可以自己控制读写权限      优点2：对于写权限，我们可以检测数据的有效性2、对象的初始化和清理·每个对象都会有自己的设置，以及对象销毁前清理数据的设置     1）构造函数和析构函数           对象的初始化和清理是两个非常重要的安全问题           一个对象或者变量没有初始状态，对其使用的后果是未知的           同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题                C++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。           对象的初始化工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供           编译器提供的构造函数和析构函数是空实现                   ·构造函数：主要作用在于创建对象时为对象的成员属性复制，构造函数由编译器自动调用，无需手动调用           ·析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作                     构造函数语法：类名（）&#123;&#125;               1、构造函数，没有返回值也不写void               2、函数名称与类名相同               3、构造函数可以由参数，因此可以发生重载               4、程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次            析构函数语法：~类名（）&#123;&#125;               1、析构函数，没有返回值也不写void               2、函数名称与类名相同               3、析构函数不可以有参数，因此不可以发生重载               4、程序在对象销毁前会自动调用析构，无需手动调用，而且只会调用一次            构造函数的分类及调用：               两种分类方式：                    按参数分为：有参构造和无参构造，（即，Person()&#123;&#125;,     Person(int age)&#123;&#125;）                    按类型分为：普通构造和拷贝构造，（普通构造，即上边的有参构造和无参构造。拷贝构造：Person(const Person &p)&#123;&#125;）               三种通用方式：                    括号法：Person p;//调用了无参构造。。Person p2(10);//调用了有参构造。。Person p3(p2);//调用了拷贝构造函数                    注：在调用默认构造函数时不要加上()；因为例如：Person p();没有参数，将会被认为是函数的声明                    显示法：Person p;//默认构造。。Person p2 = Person(10);//相当于Person p2(10)，调用了有参构造。。Person p3 = Person (p2);//调用了拷贝构造                    注：这里的Person(10)，叫做匿名对象，特点：当前这一行代码执行结束后，系统会立即回收掉匿名对象                           不要利用拷贝构造函数，来初始化匿名对象（即，Person(p3);）编译器会认为是，Person p3 =Person(p3)；                    隐式转换法：Person p4 = 10;//相当于写了Person p4 = Person (10);Person p5 = p4//拷贝构造                  拷贝构造函数调用时机：                  C++中拷贝构造函数调用时机通常有三种情况                    ·使用一个已经创建完毕的对象来初始化一个新对象                    ·值传递的方式给函数参数传值：将函数的形参数据类型定义为Person                    ·以值方式返回局部对象：将函数的返回值的数据类型定义为Person             构造函数调用规则：                 默认情况下，C++编译器至少给一个类添加3个函数                 1、默认构造函数(无参，函数体为空)                 2、默认析构函数(无参，函数体为空)                 3、默认拷贝构造函数，对属性进行值拷贝                 构造函数调用规则如下：                     ·如果用户定义有参构造函数，C++不在提供默认无参构造，但是会提供默认拷贝构造                     ·如果用户定义拷贝构造函数，C++不会再提供其它构造函数             深拷贝与浅拷贝：                  深浅拷贝是面试的经典问题，也是一个坑                  浅拷贝：简单的赋值拷贝操作                                 //用户没有自己定义拷贝构造，利用的是编译器默认提供的拷贝构造函数                  深拷贝：在堆区重新申请空间，进行拷贝操作         //用户自己定义拷贝构造函数             初始化列表：                  作用：C++提供了初始化列表语法，用来初始化属性                  语法：构造函数():属性1(值1),属性2(值2)...&#123;&#125;                     例：Person p(int a,int b,int c):m_A(a),m_B(b),m_C(c)...             类对象作为类成员：                   C++类中的成员可以是另一个类的对象，我们称该成员为对象成员                   例：class A&#123;&#125;;  class B&#123;  A a;&#125;                   构造函数：当其他类对象作为本类成员，构造时候先构造类对象，再构造自身。析构函数：与构造函数顺序相反。              静态成员：                   静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员                   静态成员分为：                      ·静态成员变量：                             ·所有对象共享同一份数据                             ·在编译阶段分配内存                             ·类内声明，类外初始化                       ·静态成员函数                             ·所有对象共享同一个函数                             ·静态成员函数只能访问静态成员变量                        静态成员函数有两种访问防式：例：static void func()&#123;...&#125;;（在类里面定义了成员函数）。之后在定义一个全局函数void test01()&#123;&#125;                                                                             在test01中有两种访问成员函数的方法：1、Person p; p.func();。2、Person::func();                        在类中若定义了一个静态成员（类内属于对静态成员变量的声明，缺少定义），例：static int age; 必须要在全局区对该静态成员进性定义，即：int Person::age = 0;3、C++对象模型和this指针            成员变量和成员函数分开储存：                 在C++中，类内的成员变量和成员函数分开储存                 只有非静态成员变量才属于类的对象上                 空对象占用内存空间为：1。            this指针概念：                 C++中成员变量和成员函数是分开存储的                 每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码                 那么问题是：这一块代码是如何区分那个对象调用自己的呢？                 C++通过提供特殊的对象指针，this指针，解决上述问题。this指针指向被调用的成员函数所属的对象                 this指针是隐含每一个非静态成员函数内的一种指针                 this指针不需要定义，直接使用即可                 this指针的用途：                    ·当形参和成员变量同名时，可以用this指针来区分                    ·在类的非静态成员函数中返回对象本身，可以使用 return *this;                                 空指针访问成员函数：                     C++中的空指针也是可以调用成员函数的，但是也要注意有没有用到this指针                     如果用到this指针，需要加以判断保证代码的健壮性。                                const修饰成员函数：                 常函数：                   ·成员函数后加const后我们称这个函数为常函数                     const要加在成员函数的后边，例：void showPerson ()const  &#123;&#125;                     this指针的本质相当于指针常量，可以修改指向的值，不可以修改指向的方向                     这里得到常函数相当于在指针常量前又加了const 相当于 const Person *  const this;                     在成员函数后面加const，修饰的是this指向，让指针指向的值也不可以修改                   ·常函数内不可以修改成员属性                   ·成员属性声明时加关键字mutable后，在常函数中依然可以修改                                  常对象：                   ·声明对象前加const称该对象为常对象                    例：const Person p                   ·常对象只能调用常函数4、友元            在程序里，有些私有属性，也想让类外特殊的一些函数或者类进行访问，就需要用到友元技术            友元的目的就是让一个函数或者类，访问另一个类中的私有成员            友元的关键字为：friend                        友元的三种实现：              ·全局函数作友元                   全局函数作友元，即在类里面对全局函数作了一次定义，并且在定义前加上friend；例：class Building&#123;friend void goodGay()&#123;&#125;&#125;; 在类外的全局区已经有了该全局函数goodGay的定义              ·类作友元                    可以在类里面写成员函数的声明，在类外写成员函数的定义，但类外的定义需要加上作用域                    类作友元，即在一个类中写了另一个类的定义，并且在定义前加上friend              ·成员函数作友元                     让一个类中的成员函数作友元，需要在另一个类中写下该成员函数的定义，并且要在定义前加上friend，还需要在函数名前写清楚作用域                     例：class Building&#123;friend void GoodGay::visit();&#125;;5、运算符重载            运算符重载概念：对已有得运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型            1）加号运算符重载                              作用：实现两个自定义数据类型相加的运算                 通过成员函数实现重载+号：     需要在类里面定义这个成员函数，且需要用到编译器提供的加号重载的函数名：operator+。例：Person operator+(Person &amp;p)。调用：Person p3 = p1+p2 ;Person p3=p1.operator+(p2)                 通过全局函数实现重载+号：     需要在全局区定义一个全局函数，且需要用到编译器提供的加号重载的函数名：operator+。例：Person operator+(Person &amp;p1,Person &amp;p2)。调用: Person p3 = p1+p2 ;Person p3 = operator+(p1,p2);                 注：运算符重载也可以用在函数重载中            2）左移运算符重载                  作用：可以输出自定义数据类型                  不能利用成员函数重载左移运算符，必须用全局函数实现重载左移运算符：这时要运用编译器给的函数名称：operator&lt;&lt;;                          例：ostream&amp; operator&lt;&lt;(ostream&amp; cout,Person &amp;p)&#123; cout&lt;&lt;&quot;m_A = &quot;&lt;&lt;p.m_A;cout&lt;&lt;&quot; m_B = &quot;&lt;&lt;p.m_B;&#125;//otream是cout的数据类型                                  本质为：operator&lt;&lt;(cout,p);简写为：cout&lt;&lt;p;                  若该类里面的成员属性为私有，则需要用到友元技术，即在类里面作全局函数的声明，并在前边加friend            3）递增运算符重载                 作用：通过重载递增运算符，实现自己的整形数据                                   递增运算符的重载要在左移运算符重载的基础上实现                 首先要实现左移运算符重载，接下来实现递增运算符重载。                 递增运算符分为两种：前置递增，后置递增。                 先说前置递增：//前置递增返回的是类的本身，返回引用是为了一直对一个数据进行递增操作，防止使用拷贝构造函数而创造新的变量                           利用成员函数实现前置递增运算符重载：在类的内部写出成员函数，例：Myinteger&amp; operator++()&#123;m_num++;  return *this;&#125;                           调用：                 后说后置递增：//成员函数后用到占位函数，使编译器看到函数的重载，后置递增返回的是一个值，并不是引用                           利用成员函数实现后置递增运算符重载：在类的内部写出成员函数，例：Myinteger operator++(int)&#123;Myinteger tem = *this; m_num++; return tem;&#125;             4）赋值运算符重载                  C++编译器至少给一个类添加四个函数：                       1、默认构造函数（无参，函数体为空）                       2、默认析构函数（无参，函数体为空）                       3、默认拷贝构造函数，对属性进行值拷贝                       4、赋值运算符operator=，对属性进性值拷贝                  如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题             5）关系运算符重载                  作用：重载关系运算符，可以让两个自定义类型对象进性比较                  利用成员函数实现关系运算符“==”的重载。                  例：bool operator==(Person &amp;p)&#123;&#125;                  利用成员函数实现关系运算符“!=”的重载。                  例：bool operator!=(Person &amp;p)&#123;&#125;             6）函数调用运算符重载                  ·函数调用运算符()也可以重载                  ·由于重载使用后的方式非常像函数的调用，因此称为仿函数                  ·仿函数没有固定写法，非常灵活                  这个重载就是让成员函数的调用，语法相同于全局函数的调用，函数名要使用编译器提供的operator()                  例：（成员函数）  void operator()(string name)&#123;this-&gt;name = name;&#125;  调用就直接用所创建的对象名，例：Myprint print;  print(&quot;hello&quot;);直接用                  匿名对象：                      一个类后面加一个()就叫做匿名对象，匿名对象后加参数，就实现了运算符重载6、继承           有些类和类在之间存在特殊的关系，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性           这个时候我们就可以考虑使用继承的技术，减少重复代码            1）继承的基本语法                 语法：class 子类 : 继承方式(访问权限) 父类                    注：子类也叫做派生类，父类也叫做基类                 继承的好处：可以减少重复的代码                 class A : public B ;                 A称作子类或者派生类，B称作父类或者基类。                 派生类中的两大成员：                          一类是从基类继承过来的，一类是自己增加成员                          从基类继承过来的的表现其共性，而新增的成员体现了其个性。            2）继承方式                 继承的语法：class 子类 : 继承方式 父类                 三种继承方式：（三种继承方式都不可以访问父类中的私有成员，但可以访问剩余两个权限下的成员）（但是私有属性还是被继承了，只是被隐藏了）                 公共继承：不可访问父类私有成员，父类中的共有权限成员，到子类中依然是公共权限，父类中的保护权限成员，到子类中依然是保护权限                 保护继承：不可访问父类私有成员，父类中的共有权限成员，到子类中依然是保护权限，父类中的保护权限成员，到子类中依然是保护权限                 私有继承：不可访问父类私有成员，父类中的共有权限成员，到子类中依然是私有权限，父类中的保护权限成员，到子类中依然是私有权限            3）继承中的对象模型                  问题：从父类继承过来的成员，哪些属于子类对象中？                            父类中所有非静态成员属性都会被子类继承下去                            父类中的私有成员属性是被编译器隐藏了，因此访问不到，但是确实被继承下去了                  利用开发人员命令提示工具查看对象模型                  跳转盘符  F:                  跳转文件路径  cd ..具体路径下                  查看命令                   c1 / d1 reportSingleClassLayout类名 文件名             4）继承中构造和析构顺序                   子类继承父类后，当创建子类对象，也会调用父类的构造函数                   问题：父类和子类的构造和析构顺序是谁先谁后？                   顺序为：父类构造函数，子类构造函数，子类析构函数，父类析构函数             5）继承同名成员处理方式                  问题：当子类与父类出现同名成员，如何通过子类对象，访问到子类或父类中同名的数据呢？                  ·访问子类同名成员，直接访问即可                  ·访问父类同名成员，需要加作用域                  如果通过子类对象，访问到父类中同名成员，需要加作用域                  如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有同名成员函数。此时如果想访问到父类中被隐藏的同名成员函数，需要加作用域             6）继承同名静态成员处理方式                  问题：继承中同名的静态成员在子类对象上如何进行访问？                  静态成员和非静态成员出现同名，处理方式一样                  ·访问子类同名成员   直接访问即可                  ·访问父类同名成员   需要加作用域                  但是静态成员除了通过对象来访问，也可以直接通过类名来访问，类名+作用域+静态变量，例：Son :: m_A;                  子类出现和父类同名静态成员函数，也会隐藏父类中所有同名静态成员函数。如果想访问父类中被隐藏同名成员，需要加作用域                  同名静态成员处理方式和非静态处理方式一样，只不过有两种访问方式，（通过对象 和 通过类名）              7）多继承语法（C++实际开发中不建议用多继承 ）                   C++允许一个类继承多个类                   语法：class 子类 : 继承方式1  父类1 , 继承方式2  父类2 ......                   多继承可能会引发父类中有同名成员出现，需要加作用域区分              8）菱形继承                   菱形继承概念：                              ·两个派生类继承同一个基类                              ·又有某个类同时继承着两个派生类                              ·这种继承称为菱形继承或者钻石继承                   利用虚继承  解决菱形继承问题                   在继承之前，加上关键字：virtual，变为虚继承7、多态              1）多态的基本概念、                   多态是C++面向对象三大特征之一                   多态分为两类：                    ·静态多态：函数重载 和 运算符重载属于静态多态，复用函数名                    ·动态多态：派生类和虚函数实现运行时多态                    静态多态和动态多态的区别：                    ·静态多态的函数地址早绑定 - 编译阶段确定函数地址                    ·动态多态的函数地址晚绑定 - 运行阶段确定函数地址                    动态多态满足条件：                    1、有继承关系                    2、子类重写父类的虚函数（重写：函数返回值类型  函数名  参数列表  完全一致称为重写）                    动态多态使用：                    父类的指针或者引用，指向子类对象                     函数前面加上关键字virtual，变成虚函数，那么编译器在编译的时候就不能确定函数调用了              2）多态的好处                   1、组织结构清晰                   2、可读性强                    3、对于前期和后期扩展以及维护性高              3）纯虚函数和抽象类                   在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容                   因此可以将虚函数改为纯虚函数                   纯虚函数语法：virtual  返回值类型  函数名(参数列表) = 0;                   当类中有纯虚函数，这个类也成为抽象类                   抽象类特点：                       ·无法实例化对象                       ·子类必须重写抽象类中的纯虚函数，否则也属于抽象类              4）虚析构和纯虚析构                   多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用子类的析构代码                   解决方式：将父类中的析构函数改为虚析构或者纯虚析构                   虚析构和纯虚析构的特性：                       ·可以解决父类指针释放子类对象                       ·都需要有具体的函数体现                   虚析构和纯虚析构的区别：                       ·如果是纯虚析构，该类属于抽象类，无法实例化对象                   虚析构语法：                       virtual ~类名()&#123;&#125;                   纯虚析构语法：                       virtual ~类名() = 0;                   纯虚析构需要有声明，也需要有实现（在全局区给出作用域下的定义），纯虚函数不需要有实现                   虚析构或者纯虚析构是用来解决通过父类指针释放子类对象                   如果子类中没有堆区数据，就可以不写虚析构或者纯虚析构                   拥有纯虚析构函数的类也是抽象类                   </code></pre><h2 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h2><pre><code>模板   一、模板的概念：            模板就是建立通用的模具，大大提高复用性    二、函数模板：           ·C++另一种编程思想称为泛型编程，主要利用的技术就是模板           ·C++提供两种模板机制：函数模板和类模板                     1、函数模板语法                函数模板作用：建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表                语法：                     1、template&lt;typename T&gt;                     2、函数声明或定义                ·template -- 声明创建模板                ·typename -- 表示其后面得符号是一种数据类型，可以用class代替                ·T  -- 通用的数据类型，名称可以替换，通常为大写字母                 两种方式使用模板：                    ·自动类型推导：myswap(a,b);                    ·显示指定类型：myswap&lt;int&gt;(a,b);          2、函数模板注意事项：               ·自动类型推导：必须推导出一致的数据类型T，才可以使用               ·模板必须要确定出T的数据类型，才可以使用，声明模板后必须立刻使用          3、普通函数与函数模板的区别                 ·普通函数调用时可以发生自动类型转换（隐式类型转换）                 ·函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换                 ·如果利用显示指定类型的方式，可以发生隐式类型转换          4、普通函数和模板函数的调用规则                 ·如果函数模板和普通函数都可以实现，优先使用普通函数                 ·可以通过空模板参数列表来强制调用函数模板                         空模板参数列表，就是不显示指定类型，例：Swap&lt;&gt;(a,b);                 ·函数模板也可以发生重载                 ·如果函数模板可以产生更好的匹配，优先使用函数模板          5、模板的局限性                 ·模板的通用性并不是万能的                  对于自定义数据类型，不能够进性预期的运算                  利用具体化实现代码，具体化优先调用                         具体化：template&lt;&gt;   返回值类型  函数名(变量...)                 ·利用具体化的模板，可以解决自定义类型的通用化   三：类模板          1、类模板语法：                  类模板的作用：建立一个通用类，类中的成员、数据类型可以不具体指定，用一个虚拟的类型来代表                                 语法：template&lt;typename T&gt;(可以有多个变量，因为类对象会有多个变量)                           类                           创建类对象时：要在类名后面声明变量类型 Person&lt;string ,int&gt; p1(&quot;1&quot;,1);                        2、类模板与函数模板的区别：                  ·类模板没有自动类型推导的使用方式                  ·类模板在模板参数列表中可以有默认参数           3、类模板中成员函数创建时机：                   类模板中成员函数和普通类中成员函数创建时机是有区别的：                      ·普通类中的成员函数一开始就可以创建                      ·类模板中的成员函数在调用时才创建           4、类模板对象做函数参数：                   ·类模板实例化出的对象，向函数传参的方式                                   一共有三种传入方式：                       ·指定传入的类型：   --直接显示对象的数据类型                              void test(Person&lt;string,int&gt; &amp;p)                       ·参数模板化：          --将对象中的参数变为模板进行传递                              template&lt;class T1,class T2&gt;                              void test(Person&lt;T1,T2&gt; &amp;p)                       ·整个类模板化：       --将这个对象类型，模板化进行传递                              template&lt;class T&gt;                              void test(T &amp;p)           5、类模板与继承：                  ·当子类继承的父类是一个类模板时，子类在声明的时候，需指定出父类中T的类型，即父类是模板，子类不是                  ·如果不指定，编译器无法给子类分配内存，无法运行                  ·如果想灵活指定出父类中T的类型，子类也需变为类模板，即父类是模板，子类也是                                  如果父类是类模板，子类需要指定出父类中T的数据类型           6、类模板成员函数类外实现：                  类模板的成员函数在类内声明后，                  在类外定义：template&lt;class T1,class T2&gt;                                      Person&lt;string,int&gt;::Person(T1 name,T2 age)                                      &#123;定义&#125;            7、类模板分文件缩写：                  ·类模板中成员函数创建时机是在调用阶段，导致分文件缩写时链接不到                  ·解决方式1：直接包含.cpp源文件，即在头文件中写##include &quot;Person.cpp&quot;，而不是##include &quot;Person.h &quot;                  ·解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称            8、类模板与友元：                  ·掌握类模板配合友元函数的类内实现和类外实现                  全局函数类内实现 - 直接在类内声明友元即可                  全局函数类外实现 - 需要提前让编译器知道全局函数的存在，即在类模板之前进行了全局函数的定义与类模板的声明                                </code></pre><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><pre><code>1、引用的基本使用    作用：给变量起别名    语法：数据类型 &amp;别名 = 原名;2、引用的注意事项    引用必须要初始化       例如：int &amp;b;//这句话是错误的，因为b这个引用没有初始化。必须有：int &amp;b = a;这样是正确的    初始化后的引用，不可以改变3、引用作函数参数    作用：函数传参时，能利用引用的技术让形参修饰实参    优点：可以简化指针修改实参4、引用是可以作为函数返回值存在的    注意：不要返回局部变量的引用          例：int&amp; test()&#123; int a = 0 ; return a;&#125;//这里的a就是局部变量（存放在栈区），若调用该函数（int &amp; b = test()），第一次编译器能为我们保留a的值，但第二次开始，a的值就被释放    用法：函数调用的左值          例：int test()&#123; static int a = 0 ; return a;&#125;//这里a就是静态变量（放在全局区），若调用该函数（int &amp; b = test()），之后的b能够正常输出10，若用：test()=100,之后的输出就变为1005、引用的本质    引用的本质就是在C++内部实现一个指针常量（即相当于：int * const ptr = &amp;a; 对于该指针常量，可以改变该指针指向的值，但却不能改变指针指向的方向）6、常量引用    常量引用主要用来修饰形参，防止误操作        即，在参数列表中，可以加const修饰形参，防止形参改变实参。        例：int &amp; b = a;（该操作是允许的）,但int &amp; b =10;（该操作又是错误的）              const int &amp; b =10;（该操作是允许的）              该操作可以理解为：int temp= 10;（这个定义变量是系统默认操作的）const int &amp; b =temp;（该引用也是操作默认操作的）</code></pre><h2 id="文件操作："><a href="#文件操作：" class="headerlink" title="文件操作："></a>文件操作：</h2><pre><code>程序运行时产生的数据都是临时数据，程序一旦运行结束就会被释放通过文件可以将数据持久化C++中对文件操作需要需要包含头文件&lt;fstream&gt;文件类型分为两种    1、文本文件    ：文件以文本的ASCII码形式存储在计算机中    2、二进制文件：文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们操作文件的三大类    1、ofstream：写操作    2、ifstream：读操作    3、fstream：读写操作1）文本文件        1、写文件             写文件步骤如下：                      1、包含头文件&lt;fstreatm&gt;                      2、创建流对象  ofstream ofs;                      3、打开文件  ofs.open(&quot;文本路径&quot;,打开方式);                      4、写数据  ofs&lt;&lt;&quot;写入的数据&quot;;                      5、关闭文件  ofs.close();             文件打开方式：                     ios::in     为读文件而打开文件                     ios::out   为写文件而打开文件、                     ios::ate    初始位置：文件尾                     ios::app  追加方式写文件                     ios::trunc   如果文件存在，先删除，再创建                     ios::binary  二进制方式             注意：文件打开方式可以配合使用，利用 | 操作符             例如：用二进制方式来写一个文件：ios::binary | ios::out         2、读文件             读文件与写文件步骤相似，但是读取方式相对于比较多             读文件步骤如下：                 1、包含头文件                       ##include &lt;fstream&gt;                 2、创建流对象                       ifstream  ifs;                 3、打开文件并判断文件是否打开成功                      ifs.open(&quot;文件路径&quot;,打开方式)；                 4、读数据                      四种读取方式                      1·char buf[1024] = &#123;0&#125;;                         while(ifs&gt;&gt;buf)                          &#123;                               cout&lt;&lt;buf&lt;&lt;endl;                          &#125;                       2·char buf[1024] = &#123;0&#125;;                          while(ifs.getline(buf,sizeof(buf)))                          &#123;                               cout&lt;&lt;buf&lt;&lt;endl;                          &#125;                       3·string buf                          while(getline(ifs,buf))                          &#123;                               cout&lt;&lt;buf&lt;&lt;endl;                          &#125;                      4·char c;                         while(  (c = ifs.get())  !=  EOF )  // EOF:end of file                         &#123;                               cout&lt;&lt;c;                         &#125;                      5、关闭文件                         ifs.close();                  ·读文件可以用ifstream，或者fstream类                  ·利用is_open函数可以判断文件是否成功打开                  ·close关闭文件2）二进制文件        以二进制的方式对文件进性读写操作        打开方式要指定为 ios::binary                 1、写文件             二进制方式写文件主要利用流对象调用成员函数write                 函数原型：ostream&amp; write(const char * buffer,int len);             参数解释：字符指针buffer指向内存中一段存储空间，len是读写的字节数        2、读文件             二进制方式读文件主要利用流对象调用成员函数read             函数原型：istream&amp; read(char *buffer,int len)             参数解释：字符指针buffer指向内存中一段存储空间，len是读写的字节数                    </code></pre><h2 id="容器vector："><a href="#容器vector：" class="headerlink" title="容器vector："></a>容器vector：</h2><pre><code>基本概念：    功能：vector数据结构和数组非常相似，也称为单端数组    vector与普通数组区别：不同之处在于数组是静态空间，而vector可以动态扩展    动态扩展：并不是在原空间之后续借新空间，而是找更大的内存空间，然后将原数据拷贝到新空间，释放原空间                     vector容器的迭代器是支持随机访问的迭代器vector构造函数：     函数原型：    1、vector&lt;T&gt; v;    //采用模板实现类实现，默认构造函数                2、vector (v.begin(),v.end())   //将区间 [ begin , end ) 左闭右开内的元素拷贝给本身    3、vector (n,elem);    //构造函数将n个elem拷贝给本身    4、vector(const vector&amp; v)  //拷贝构造函数vector赋值操作：     函数原型：    1、vector&amp; operator=(const vector &amp;vec);   //重载等号操作符    2、assign(beg,end);   //将[beg,end)区间中的数据拷贝赋值给本身    3、assign(n,elem);     //将n个elem拷贝赋值给本身vector容量和大小：      函数原型：    1、empty()；    //判断容器是否为空    2、capacity()： //容器的容量    3、size()：        //返回容器中元素的个数    4、resize(int num)；       //重新指定容器的长度为num，若容器变长，则以默认值 0 填充新位置，如果容器变短，则末尾超出容器长度的元素将被删除    5、resize(int num, elem)；  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置，如果容器变短，则末尾超出容器长度的元素将被删除vector插入和删除：      函数原型：    1、push_back(elem);      //尾部插入元素elem     2、pop_back();     //删除最后一个元素    3、insert(const_iterator pos,ele);     //迭代器指向位置pos插入元素ele    4、insert(const_iterator pos,int count,ele);      //迭代器指向位置pos插入count个元素ele    5、erase(const_iterator pos);     //删除迭代器指向的元素    6、erase(const_iterator start,const_iterator end)；     //删除迭代器从start到end之间的元素    7、clear()；     //删除容器中所有元素vector数据存取：      函数原型：    1、at(int idx)；   //返回索引idx所指的数据    2、operator[]； //返回索引idx所指的数据    3、front()： //返回容器中第一个元素    4、back()；  //返回容器中最后一个元素vector互换容器：       swap(v)；     //将v与本身的元素互换   v1.swap(v2);       利用匿名对象调用拷贝构造函数来收缩内存空间，vector&lt;int&gt; (v).swap(v);    第一个(v)是匿名对象，后边的.swap(v)是交换容器，系统会自动回收匿名对象vector预留空间：       减少vector在动态扩展容量时的扩展次数       函数原型：    reserve(int len)；   //容量预留len个元素长度，预留位置不初始化，元素不可访问，控制了vector开辟空间的次数    </code></pre><h2 id="容器string："><a href="#容器string：" class="headerlink" title="容器string："></a>容器string：</h2><pre><code>本质：    stirng是C++风格字符串，而string本质上是一个类string和char*的区别：    ·char*是一个指针    ·string是一个类，类内部封装了char*，管理这个字符串，是一个char*的容器特点：    string类内部封装了很多成员方法    例如：查找find，拷贝copy，删除delete，替换replace，插入insert    string管理char*所分配的内存，不用担心复制越界或者取值越界等，由类内部进行负责string构造函数：    构造函数原型：       ·string()：创建一个空的字符串，例如：string str;        string(const char *s)：使用字符串s初始化       ·string(const string &amp;str)：使用一个string对象初始化另一个string对象       ·string(int n,char c)：使用n个字符c初始化string赋值操作：     ·功能描述：给string字符串进行赋值     ·赋值的函数原型：           string&amp; operator = (const char* s);                 //char *类型字符串，赋值给当前的字符串           string&amp; operator = (const string &amp;s);             //把字符串s赋给当前的字符串           string&amp; operator = (char c);                           //字符赋值给当前的字符串           string&amp; assign(const char* s);                        //把字符串s赋给当前字符串           string&amp; assign(const char* s,int n);                //把字符串s的前n个字符赋给当前字符串           string&amp; assign(const string &amp;s);                    //把字符串s赋给当前字符串           string&amp; assign(int n,char c);                          //用n个字符c赋给当前字符串string字符串拼接：      ·实现在字符串末尾拼接字符串。       ·函数原型：            string&amp; operator += (const char* str);            //重载+=操作符            string&amp; operator += (const char c);               //重载+=操作符            string&amp; operator += (const string&amp; str);       //重载+=操作符            string&amp; append(const char* s);                     //把字符串s连接到当前字符串末尾            string&amp; append(const char* s.int n);             //把字符串s的前n个字符连接到当前字符串末尾            string&amp; append(const string &amp;s);                 //同operator+=(const string&amp; str)            string&amp; append(const string &amp;s,int pos,int n)      //字符串s中从pos开始的n个字符连接到字符串末尾string查找和替换：      ·查找：查找指定字符串是否存在      ·替换：在指定的位置替换字符串      ·函数原型：(如果find没有找到对应的字符或字符串，则会返回-1)             int find(const string&amp; str,int pos = 0) const;            //查找str第一次出现的位置，从pos开始查找             int find(const char* s,int pos = 0) const;                  //查找s第一次出现的位置，从pos开始查找             int find(const char* s,int pos,int n) const;                //从pos位置查找s的前n个字符第一次位置             int find(const char c,int pos = 0) const;                 //查找字符c第一次出现的位置             int rfind(const string&amp; str,int pos = npos) const;      //查找str最后一次位置，从pos开始查找             int rfind(const char* s,int pos = npos) const;            //查找s最后一次位置，从pos开始查找             int rfind(const char* s.int pos,int n) const;                //从pos查找s的前n个字符最后一次位置             int rfind(const char c,int pos = 0) const;                   //查找字符c最后一次出现位置             string&amp; replace(int pos,int n,const string&amp; str);        //替换从pos开始n个字符为字符串str             string&amp; replace(int pos,int n,const char* s);              //替换从pos开始n个字符为字符串sstring字符串比较：      ·字符串比较是按照字符的ASCII码进行比较：= 返回 0，&gt; 返回 1，&lt; 返回 -1      ·函数原型：(字符串1.compare(字符串2))            int compare(const string&amp; s) const;   //与字符串s比较            int compare(const char* s) const;      //与字符串s比较 string字符存取：      ·string中单个字符存取方式有两种：            1、char&amp; operator[](int n);      //重载了[]            2、char&amp; at(int n);                   //通过at方法获取字符，str.at(位置)      ·string中单个字符修改：            1、str[i] = &#39;新字符&#39;;            2、str.at(i) = &#39;新字符&#39;;string的插入和删除：      ·函数原型：           string&amp; insert(int pos,const char* s);     //在指定位置插入字符串           string&amp; insert(int pos,const string&amp; str);      //在指定位置插入字符串           string&amp; insert(int pos,int n,char c);      //在指定位置插入n个字符c           string&amp; erase(int pos,int n = npos);    //删除从pos开始的n个字符 string子串：      ·函数原型：           string substr(int pos = 0,ing n = npos) const;     //返回由pos开始的n个字符组成的字符串           </code></pre><h2 id="容器list："><a href="#容器list：" class="headerlink" title="容器list："></a>容器list：</h2><pre><code>基本概念：     将数据进行链式存储，是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的     链表的组成：链表由一系列结点组成     结点的组成：一个是存储数据元素的数据域，另一个是存储下一个节点地址的指针域构造函数：     函数原型：       ·list&lt;T&gt;  lst;  //list采用模板类实现，对象的默认构造形式       ·list(begin,end);  //构造函数将[begin,end)区间内的元素拷贝给本身       ·list(n,elem);   //构造函数将n个elem元素拷贝给本身       ·list(const list &amp;lst)   //拷贝构造函数赋值和交换：      函数原型：        ·assign(begin,end);  //将[begin,end)区间中的数据拷贝赋值给本身        ·assign(n,elem);   //将n个elem拷贝赋值给本身        ·list&amp; operator=(const list&amp; lst);   //重载等号运算符        ·swap(lst);   //将lst与本身的元素互换大小操作：      函数原型：        ·size();  //返回容器中元素的个数        ·empty();   //判断容器是否为空        ·resize(num);   //重新指定容器的长度为num，若容器变长，则以默认值填充容器；若容器变短，则末尾超出容器长度的元素将被删除        ·resize(num,elem);  //重新指定容器的长度为num，若容器变长，则以值elem填充容器；若容器变短，则末尾超出容器长度的元素将被删除插入和删除：      函数原型：（pos应该用迭代器）        ·push_back(elem);  //将元素elem插入容器的末尾        ·pop_back();  //删除容器的最后一个元素        ·push_front(elem);  //在容器开头插入elem        ·pop_front();  //删除容器开头的元素        ·insert(pos,elem);  //在pos位置插元素elem的拷贝，返回新数据的位置        ·insert(pos,n,elem);  //在pos位置插入n个elem数据，无返回值        ·insert(pos,begin,end);  //在pos位置插入[begin,end)区间内的数据，返回下一个数据的位置        ·clear();  //移除容器中所有的元素        ·erase(begin,end);  //删除[begin,end)区间内的数据，返回下一个数据的位置        ·erase(pos);  //删除pos位置的元素，返回下一个元素的位置        ·remove(elem);  //删除容器中所有与elem值匹配的元素数据存取：      函数原型：（不支持随机访问）        ·front();  //返回第一个元素        ·back();  //返回最后一个元素反转和排序：       函数原型：         ·reverse();  //反转链表         ·sort();   //链表排序         </code></pre><h2 id="容器deque："><a href="#容器deque：" class="headerlink" title="容器deque："></a>容器deque：</h2><pre><code>功能：     双端数组，可以对头端进性插入删除操作deque与vector区别：     ·vector对于头部的插入删除效率低，数据量越大，效率越低     ·deque相对而言，对头部的插入删除速度会比vector快     ·vector访问内部元素的速度会比deque快，这和两者内部实现有关deque构造函数：     函数原型：     ·deque&lt;T&gt; d;   //默认构造形式     ·deque(begin, end);   //构造函数将[begin, end)区间中的元素拷贝给本身     ·deque(n,elem);      //构造函数将n个elem拷贝给本身     ·deque(const deque &amp;d);     //拷贝构造函数deque赋值操作：     函数原型：     ·deque&amp; operator=(const deque &amp;d);     //重载等号操作符     ·assign(begin,end);    //将(begin,end)区间中的数据拷贝赋值给本身     ·assign(n,elem);     //将n个elem拷贝赋值给本身 deque大小操作：     函数原型：     ·deque.empty();   //判断deque是否为空     ·deque.size();      //返回容器中元素的个数     ·deque.resize(num);       //重新指定容器的长度为num，若容器变长，则以默认值0填充新位置，若容器变短，则末尾超出容器长度的元素将被删除     ·deque.resize(num,elem);      //重新指定容器的长度为num，若容器变长，则以elem填充新位置，若容器变短，则末尾超出容器长度的元素将被删除deque插入和删除：     函数原型：     两端插入操作：     ·push_back(elem);    //在容器尾部添加一个数据     ·push_front(elem);    //在容器头部添加一个数据     ·pop_back();     //删除容器最后一个数据     ·pop_front();     //删除容器第一个数据     指定位置操作：     ·insert(pos,elem);    //在pos位置插入一个elem元素的拷贝，返回新数据的位置     ·insert(pos,n,elem);     //在pos位置插入n个elem数据，无返回值     ·insert(pos,begin,end);    //在pos位置插入[begin,end)区间的数据，无返回值     ·clear();    //清空容器的所有数据     ·erase(begin,end);   //删除[begin,end)区间的数据，返回下一个数据的位置     ·erase(pos);      //删除pos位置的数据，返回下一个数据的位置deque数据存取：     函数原型：     ·at(int index);       //返回索引index位置的元素     ·operator[];          //返回索引位置的元素     ·front();              //返回容器中第一个元素     ·back();             //返回容器中最后一个元素deque排序：     算法：     sort(iterator begin, iterator end);      //对begin和end区间之间的元素排序     </code></pre><h2 id="容器stack和queue："><a href="#容器stack和queue：" class="headerlink" title="容器stack和queue："></a>容器stack和queue：</h2><pre><code>stack：    概念：stack是一种先进后出的数据结构，它只有一个出口    栈容器：符合先进后出    栈不允许有遍历行为    栈可以判断容器是否为空，.empty()    栈可以返回元素个数，.size()    栈中进入数据称为 -- 入栈， push    栈中弹出数据称为 -- 出栈， pop    常用接口：       构造函数：       ·stack&lt;T&gt;  s;   //采用模板类实现，stack对象的默认构造形式       ·stack(const stack &amp;s);    //拷贝构造函数       赋值操作：       ·stack&amp; operatpr=(const stack &amp;s);     //重载等号运算符       数据存取：       ·push(elem);     //向栈顶添加元素       ·pop();      //从栈顶移除第一个元素       ·top();      //返回栈顶元素       大小操作：       ·empty();   //判断栈是否为空        ·size();     //返回栈的大小queue：     概念：queue是一种先进先出的数据结构，它有两个出口     常用接口：     构造函数：     ·queue&lt;T&gt; q;     //queue采用模板类实现，queue对象的默认构造形式     ·queue(const queue &amp;q);   //拷贝构造函数     赋值操作：     ·queue&amp; operator=(const queue &amp;q);    //重载等号运算符     数据存取：     ·push(elem);   //往队尾添加元素     ·pop();     //从队头移除第一个元素     ·back();     //返回最后一个元素     ·front();     //返回第一个元素     大小操作：     ·empty();    //判断堆栈是否为空     ·size();      //返回栈的大小     </code></pre><h2 id="容器map和multimap："><a href="#容器map和multimap：" class="headerlink" title="容器map和multimap："></a>容器map和multimap：</h2><pre><code>map基本概念：     ·map中所有元素都是pair     ·pair中第一个元素为key(键值)，起到索引作用，第二个元素为value(实值)     ·所有元素都会根据键值自动排序     ·map/multimap属于关联式容器，底层结构是用二叉树实现     ·可以根据key值快速找到value值map和multimap的区别：      ·mao不允许容器中有重复的键值元素      ·multimap允许容器中有重复的key值元素map构造和赋值：      函数原型：           ·map&lt;T1, T2&gt; mp;  //map默认构造函数           ·map(const map&amp; mp);  //拷贝构造函数           ·map&amp; operator=(const map&amp; mp);  //重载等号运算符           map大小和交换：      函数原型：           ·size();  //返回容器中元素的个数           ·empty();  //判断容器是否为空           ·swap(mp);   //交换两个集合容器map插入和删除：     函数原型：          ·insert(elem);  //在容器中插入元素elem          ·clear();  //清除所有元素          ·erase(pos);  //删除迭代器pos位置的元素，返回下一个元素的迭代器          ·erase(begin,end);  //删除区间[begin,end)的所有元素，返回下一个元素的迭代器          ·erase(key);  //删除键值为key的元素map查找和统计：     函数原型：          ·find(key);  //查找键值key是否存在，若存在，则返回该键的元素的迭代器，若不存在，返回set.end();          ·count(key);  //统计key的个数map容器排序：     map容器默认排序规则为：按照key值进性从小到大排序，利用仿函数可以改变排序规则</code></pre><h2 id="容器set和multiset："><a href="#容器set和multiset：" class="headerlink" title="容器set和multiset："></a>容器set和multiset：</h2><pre><code>set基本概念：    ·所有元素都会在插入时自动被排序    ·set/multiset属于关联式容器，底层结构是用二叉树实现。set和multiset区别：    ·set不允许容器中有重复的元素    ·multiset允许容器中有重复的元素set构造和赋值：     函数原型：       ·set&lt;T&gt; st;  //默认构造函数       ·set(const set&amp; st);  //拷贝构造函数       ·set&amp;  operator=(const set&amp; st);  //重载等号运算符set大小和交换：     函数原型：       ·size();  //返回容器中元素的数目       ·empty();  //判断容器是否为空       ·swap(st);  //交换两个集合容器set插入和删除：     函数原型：       ·insert(elem);  //在容器中插入元素       ·clear();  //清除所有元素       ·erase(pos);   //删除pos迭代器所指的元素，返回下一个元素的迭代器       ·erase(begin,end);  //删除区间[begin,end)的所有元素，返回下一个元素的迭代器       ·erase(elem);  //删除容器中值为elem的元素set查找和统计：     函数原型：       ·find(key);  //查找key是否存在，返回该键的元素的迭代器；若不存在，返回set.end();       ·count(key);  //统计key元素的个数     set和multiset区别：      ·set不可以插入重复数据，而multiset可以      ·set插入数据的同时会返回插入结果，表示插入是否成功      ·multiset不会检测数据，因此可以插入重复数据pair对组创建：      成对出现的数据，利用对组可以返回两个数据      两种创建方式：         ·pair&lt;type,type&gt; p(value1,value2);             ·pair&lt;type,type&gt; p = make_pair(value1,value2);      利用p.first和p.second来获取pair的两个变量set容器排序：     set容器默认排序规则为从小到大，利用仿函数，可以改变排序规则     对于内置数据类型，可以不指定排序规则，对于自定义数据类型，必须指定排序规则     </code></pre><h2 id="STL函数对象："><a href="#STL函数对象：" class="headerlink" title="STL函数对象："></a>STL函数对象：</h2><pre><code>函数对象概念：     ·重载函数调用操作符的类，其对象常称为函数对象     ·函数对象使用重载的()时，行为类似函数调用，也叫仿函数     ·函数对象是一个类，不是一个函数函数对象使用：     ·函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值     ·函数对象超出普通函数的概念，函数对象可以有自己的状态     ·函数对象可以作为参数传递谓词：    谓词概念：          ·返回bool类型的仿函数称为谓词          ·如果operator()接受一个参数，那么叫做一元谓词          ·如果operator()接收两个参数，那么叫做二元谓词内建函数对象：     ·这些仿函数所产生的对象，用法和一般函数完全相同     ·使用内建函数对象时，需要引入头文件##include &lt;functional&gt;         算数仿函数：       功能：实现四则运算，其中negate是一元运算，其他都是二元运算       仿函数原型：           ·template&lt;class T&gt; T plus&lt;T&gt;  //加法仿函数           ·template&lt;class T&gt; T minus&lt;T&gt;  //减法仿函数           ·template&lt;class T&gt; T multiplies&lt;T&gt;  //乘法仿函数           ·template&lt;class T&gt; T divides&lt;T&gt;  //除法仿函数           ·template&lt;class T&gt; T modulus&lt;T&gt;  //取模仿函数           ·template&lt;class T&gt; T negate&lt;T&gt;  //取反仿函数     关系仿函数：        功能：实现关系对比        仿函数原型：            ·template&lt;class T&gt; bool equal_to&lt;T&gt;  //等于            ·template&lt;class T&gt; bool not_equal_to&lt;T&gt;  //不等于            ·template&lt;class T&gt; bool greater&lt;T&gt;  //大于            ·template&lt;class T&gt; bool greater_equal&lt;T&gt;  //大于等于            ·template&lt;class T&gt; bool less&lt;T&gt;  //小于            ·template&lt;class T&gt; bool less_equal&lt;T&gt;  //小于等于     逻辑仿函数：        功能：实现逻辑运算        仿函数原型：            ·template&lt;class T&gt; bool logical_and&lt;T&gt;  //逻辑与            ·template&lt;class T&gt; bool logical_or&lt;T&gt;  //逻辑或            ·template&lt;class T&gt; bool logical_not&lt;T&gt;  //逻辑非            </code></pre><h2 id="STL常用算法："><a href="#STL常用算法：" class="headerlink" title="STL常用算法："></a>STL常用算法：</h2><pre><code>概述：      ·算法主要是由头文件&lt;algorithm&gt;、&lt;functional&gt;、&lt;numeric&gt;组成      ·&lt;algoritm&gt;是所有STL头文件中最大的一个，范围涉及到比较、交换、查找、遍历操作、复制、修改等等      ·&lt;numeric&gt;体积很小，只包括几个在序列上面进行简单的数学运算的模板函数      ·&lt;functional&gt;定义了一些模板类，用以声明函数对象常用遍历算法：      ·for_each：遍历容器  &lt;algoritm&gt;          函数原型：for_each(iterator begin, iterator end, _func)                          //begin开始迭代器   end结束迭代器   _func函数或者函数对象，函数用自己定义的普通函数或者仿函数      ·transform：搬运容器到另一个容器中  &lt;algoritm&gt;          函数原型：transform(iterator begin1, iterator end1, iterator begin2, _func)                          //begin1源容器开始迭代器   end1源容器结束迭代器   begin2目标容器开始迭代器   _func函数或者函数对象常用查找算法：      ·find：查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()  &lt;algoritm&gt;          函数原型：find(iterator begin, iterator end, value)                          //begin开始迭代器  end结束迭代器  value查找的元素  最后的返回值是iterator，需要用一个迭代器去接收      ·find_if：按条件查找元素  &lt;algoritm&gt;          函数原型：find_if(iterator begin, iterator end, _Pred)                          //begin开始迭代器   end结束迭代器   _Pred函数或者谓词(返回bool类型的仿函数)      ·adjacent_find：查找相邻重复元素  &lt;algoritm&gt;          函数原型：adjacent_find(iterator begin, iterator end)                          //begin其实迭代器  end结束迭代器   查找到相邻重复元素返回第一个元素的迭代器，否则返回end()      ·binary_search：查找指定元素是否存在  &lt;algoritm&gt;          函数原型：bool binary_search(iterator begin, iterator end, value)                          //begin开始迭代器  end结束迭代器  value要查找的值  查找指定的元素，找到返回true，否则返回false，在无序序列中不可用      ·count：统计元素个数  &lt;algoritm&gt;          函数原型：count(iterator begin, iterator end, value)                          //begin开始迭代器  end结束迭代器  value统计的元素  统计元素出现的次数      ·count_if：按条件统计元素个数  &lt;algoritm&gt;          函数原型：count_if(iterator begin, iterator end, _Pred)                          //begin开始迭代器  end结束迭代器  _Pred谓词  常用排序算法：      ·sort：对容器内的元素进行排序  &lt;algoritm&gt;      内建函数对象greater&lt;T&gt;()，可以实现降序排列          函数原型：sort(iterator begin, iterator end, _Pred)                          //begin开始迭代器  end结束迭代器  _Pred谓词      ·random_shuffle：洗牌，指定范围内的元素随即调整次序  &lt;algoritm&gt;   使用时加上随机数种子才能一直随机          函数原型：random_shuffle(iterator begin, iterator end)                          //begin开始迭代器  end结束迭代器         ·merge：两个容器元素合并，并存储到另一个容器中  &lt;algoritm&gt;           函数原型：merge(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator dest)                           //dest目标容器开始迭代器   两个容器必须是有序的且为同一顺序  容器元素合并，存储到另一个容器中      ·reverse：将容器内的元素进行反转  &lt;algoritm&gt;           函数原型：reverse(iterator begin, iterator end)                           //begin开始迭代器  end结束迭代器  反转指定范围内的元素常用拷贝和替换算法：      ·copy：容器内指定范围内的元素拷贝到另一容器中  &lt;algoritm&gt;           函数原型：copy(iterator begin, iterator end, iterator dest)                           //dest目标容器开始迭代器         ·replace：将容器内指定范围内的旧元素修改成新元素  &lt;algoritm&gt;           函数原型：replace(iterator begin, iterator end, oldvalue, newvalue)                           //oldvalue旧值  newvalue新值      ·replace_if：将区间内条件满足的元素，替换成指定元素  &lt;algoritm&gt;           函数原型：replace_if(iterator begin, iterator end, _Pred, newvalue)                           //_Pred谓词  newvalue新值      ·swap：互换两个容器的元素  &lt;algoritm&gt;           函数原型：swap(container c1, container c2)                           //c1容器1  c2容器2  算术生成算法：      ·accumulate：计算容器给定区间内元素累计总和  &lt;numeric&gt;           函数原型：accumulate(iterator begin, iterator end, value)                           //value是起始累加值      ·fill：像容器中填充指定的元素  &lt;numeric&gt;           函数原型：fill(iterator begin, iterator end, value)                           //value填充的值常用集合算法：      ·set_intersection：求两个容器的交集           函数原型：set_intersection(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator dest)                           //dest目标容器的开始迭代器，目标容器需要提前开辟空间，两个集合必须是有序序列，最终返回一个迭代器      ·set_union：求两个容器的并集           函数原型：set_union(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator dest)                           //dest目标容器的开始迭代器，目标容器需要提前开辟空间，两个集合必须是有序序列，最终返回一个迭代器      ·set_difference：求两个容器的差集           函数原型：set_difference(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator dest)                           //dest目标容器的开始迭代器，目标容器需要提前开辟空间，两个集合必须是有序序列，最终返回一个迭代器                           </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-基础：&quot;&gt;&lt;a href=&quot;#C-基础：&quot; class=&quot;headerlink&quot; title=&quot;C++基础：&quot;&gt;&lt;/a&gt;C++基础：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
/*生成随机数！！！
调用rand()将生成一个介于0和RAND_MAX之间的随机整数(RAN</summary>
      
    
    
    
    <category term="C++" scheme="https://xggggaa.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="https://xggggaa.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xggggaa.github.io/2021/11/28/hello-world/"/>
    <id>https://xggggaa.github.io/2021/11/28/hello-world/</id>
    <published>2021-11-28T15:54:16.371Z</published>
    <updated>2021-11-28T15:54:16.371Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>        <h2 id="Quick-Start"   >          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post"   >          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server"   >          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files"   >          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites"   >          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-ex</summary>
      
    
    
    
    
  </entry>
  
</feed>
